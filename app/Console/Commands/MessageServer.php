<?php
/**
 * Created by PhpStorm.
 * User: liuwei
 * Date: 2018/9/1
 * Time: 上午11:25
 */

namespace App\Console\Commands;

use App\Incl\Business\Player;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Redis;
use Workerman\Worker;
use App\Enumeration\App;
use App\Help\Algorithm;

class MessageServer extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'MessageServer {cmd=start} {mode=""}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'as a mail server';


    private $work = null;
    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $this->work = new Worker("websocket://0.0.0.0:2000");

        $this->work->count = 1;

        $this->work->onMessage = function($connection, $data)
        {
            $result = array(
                'code'=>App::BUSINESS_EXCEPTION_CODE,
                'msg'=>'please login',
            );
            //登陆校验。写入用户缓存。暂不写数据库，后面由脚本入库  另一方面message需要可以通知reader
            $ws_data = json_decode($data ,true);

            if(isset($ws_data['token'])){
                $user_id = Algorithm::tokenDecrypt($ws_data['token']);
                if($data = Redis::get(App::USER_LOGIN_KEY.'_'.$user_id)){
                    $data = json_decode($data ,true);
                    if($ws_data['token'] == $data['token']){
                        $connection->id = $user_id;

                        if($ws_data['type']=='package'){
                            $created_at = time();

                            Player::insertPackageList($user_id ,$ws_data['content'] ,$created_at);
                            Player::insertProperPaclageSort($user_id ,$ws_data['content'] ,$created_at);

                            $result['code'] = App::BUSINESS_SUCCESS_CODE;
                            $result['msg'] = 'writePackage';

                        }elseif ($ws_data['type']=='message'){
                            $reader = isset($ws_data['reader']) ? $ws_data['reader'] : '';
                            $package_id = isset($ws_data['package_id']) ? $ws_data['package_id'] : 0;
                            Player::insertMessageList($user_id ,$reader ,$package_id ,$ws_data['content']);
                            $result['code'] = App::BUSINESS_SUCCESS_CODE;
                            $result['msg'] = 'success';

                            $connection->send(json_encode($result));

                            if(isset($this->work->connections[$reader])){
                                // 这个特定的 msg串，初始化前端的消息提醒
                                $result['msg'] = 'initMessageReminding';
                                $this->work->connections[$reader]->send(json_encode($result));
                            }

                            //当用户读取一封他人信件，会在package hash里记录一个是否reply的状态。这里回复里就会将状态置为1
                            if(isset($ws_data['first_reply']) && $ws_data['first_reply']){
                                $hData['reply'] = 1;
                                Redis::HSET(Player::USER_PROPER_PACKAGE_HASH, $user_id, json_encode($hData));
                            }

                        }else{
                            $result['msg'] = 'invalid param';
                        }
                    }
                }
            }

            if($data == 'connect'){
                $result['code'] = App::BUSINESS_SUCCESS_CODE;
            }

            $connection->send(json_encode($result));
        };

        Worker::runAll();
    }

    public function writePackage($user_id ,$cache_data){

    }

    public function writeMessage(){

    }


    public function option($key = null)
    {
        return parent::option($key); // TODO: Change the autogenerated stub
    }

    public function argument($key = null)
    {
        return parent::argument($key); // TODO: Change the autogenerated stub
    }

    public function getSon(){
        return 'aa';
    }

}